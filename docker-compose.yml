#创建名为default的网络
networks:
  default:
    driver: bridge
    ipam:
      driver: default


#创建自定义名称的卷
volumes:
  nginxLogs:
    driver: local
  phpLogs:
    driver: local
  mariadbData:
   driver: local
  mariadbLogs:
   driver: local
  kvrocksData:
    driver: local
  ofeliaLogs:
    driver: local
  dpanelData:
    driver: local


services:

  nginx:
    build:
      context: ${APP_DIR}/nginx
      dockerfile: Dockerfile
      args:
        NGINX_VERSION: nginx:${NGINX_VERSION}-alpine
        CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
    container_name: nginx
    ports:
      - "${NGINX_HTTP_HOST_PORT}:80"
      - "${NGINX_HTTPS_HOST_PORT}:443"
      - "${NGINX_HTTPS_HOST_PORT}:443/udp"
    volumes:
      - ${SOURCE_DIR}:/www/:rw
      - ${NGINX_SSL_CERTIFICATE_DIR}:/etc/nginx/ssl/:rw
      - ${NGINX_CONF_DIR}:/etc/nginx/conf/:rw
      - ${NGINX_VHOST_CONF_DIR}:/etc/nginx/vhost/:ro
      - ${NGINX_CONF_FILE}:/etc/nginx/nginx.conf:ro
      - nginxLogs:/var/log/nginx:rw
    environment:
      TZ: "$TZ"
    restart: always
    networks:
      - default
    depends_on:
      - php
    #映射docker.internal域名到宿主机IP，用于nginx反代时配置域名即可反代宿主机端口，例如：proxy_pass http://docker.internal:1234
    #如果是docker compose同网络内(这里为default)的反代域名，就直接填写 container_name 名称就行，例如：proxy_pass http://dpanel:8080
    extra_hosts:
      - docker.internal:host-gateway


  php:
    build:
      context: ${APP_DIR}/php
      dockerfile: Dockerfile
      args:
        PHP_VERSION: php:${PHP_VERSION}-fpm-alpine
        CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
        COMPOSER_URL: ${COMPOSER_URL}
        PHP_EXTENSIONS: ${PHP_EXTENSIONS}
        TZ: "$TZ"
    container_name: php
    volumes:
      - ${SOURCE_DIR}:/www/:rw
      - ${PHP_PHP_CONF_FILE}:/usr/local/etc/php/php.ini:ro
      - ${PHP_FPM_CONF_FILE}:/usr/local/etc/php-fpm.conf:rw
      - ${PHP_FPM_WWW_CONF_FILE}:/usr/local/etc/php-fpm.d/www.conf:rw
      - phpLogs:/var/log/php:rw
    restart: always
    cap_add:
      - SYS_PTRACE
    networks:
      - default
    #映射docker.internal域名到宿主机IP，用于PHP访问宿主机上的其他端口的服务
    extra_hosts:
      - docker.internal:host-gateway


  mariadb:
    image: mariadb:${MARIADB_VERSION}
    container_name: mariadb
    ports:
      - "${MARIADB_HOST_PORT}:3306" #正式环境中没外部访问需求，或非必要不建议对开放端口
    volumes:
      - ${MARIADB_CONF_FILE}:/etc/mysql/conf.d/my.cnf:ro
      - mariadbData:/var/lib/mysql:rw
      - mariadbLogs:/var/log/mysql:rw
    restart: always
    networks:
      - default
    environment:
      MARIADB_ROOT_PASSWORD: "${MARIADB_ROOT_PASSWORD}"
      MARIADB_ROOT_HOST: "${MARIADB_ROOT_HOST}"
      TZ: "$TZ"


  kvrocks:
    build:
      context: ${APP_DIR}/kvrocks
      dockerfile: Dockerfile
      args:
        KVROCKS_VERSION: apache/kvrocks:${KVROCKS_VERSION}
        CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
    container_name: kvrocks
    ports:
      - "${KVROCKS_HOST_PORT}:6666" #正式环境中没外部访问需求，或非必要不建议对开放端口
    volumes:
      - kvrocksData:/var/lib/kvrocks:rw
      - ${KVROCKS_CONF_FILE}:/kvrocks/kvrocks.conf:ro
    restart: always
    networks:
      - default
    environment:
      TZ: "$TZ"


  ofelia:
    image: mcuadros/ofelia:${OFELIA_VERSION}
    container_name: ofelia
    depends_on:
      - php
      - mariadb
    command: daemon --config=/etc/ofelia/config.ini
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${OFELIA_CONF_DIR}:/etc/ofelia:ro
      - ofeliaLogs:/var/log/ofelia:rw
    restart: always
    environment:
      TZ: "$TZ"


  dpanel:
    image: dpanel/dpanel:lite
    container_name: dpanel #更改此名称后，请同步修改下方 APP_NAME 环境变量
    #ports:
    #  - "${DPANEL_HOST_PORT}:8080" #正式环境中不建议对外部开放端口，推荐 nginx 反代内部 dpanel 的 8080 端口
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - dpanelData:/dpanel
    restart: always
    environment:
      APP_NAME: dpanel #请保持此名称与 container_name 一致
      TZ: "$TZ"

